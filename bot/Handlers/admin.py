import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CommandHandler, CallbackQueryHandler, filters

from bot.Handlers.report import is_admin
from bot.config import ADMIN_IDS, V_ADD_TITLE, V_ADD_DESC
from database.crud_sync import add_vacancy_sync, list_vacancies_sync, delete_vacancy_sync


async def _guard(update: Update) -> bool:
    if not is_admin(update):
        target = update.message or update.callback_query.message
        await target.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return False
    return True

# -------- /vacancy_add --------

async def cmd_vacancy_add(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    if not await _guard(update):
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –≤–∞–∫–∞–Ω—Å–∏–∏:", parse_mode="Markdown")
    return V_ADD_TITLE

async def vacancy_add_title(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    ctx.user_data["__vac_name"] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–æ–ø–∏—Å–∞–Ω–∏–µ* –≤–∞–∫–∞–Ω—Å–∏–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∫—Ä–∞—Ç–∫–∏–º –ø—Ä–µ–≤—å—é):", parse_mode="Markdown")
    return V_ADD_DESC

async def vacancy_add_desc(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    name = ctx.user_data.pop("__vac_name", "").strip()
    desc = update.message.text.strip()
    if not name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /vacancy_add –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END

    # –∞–ø—Å–µ—Ä—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –≤ –ø—É–ª–µ
    await asyncio.to_thread(add_vacancy_sync, name, desc)
    await update.message.reply_text(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è ¬´{name}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# -------- /vacancy_del --------

def _build_del_keyboard(names: list[str]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.
    –í callback –ø–µ—Ä–µ–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å, –∞ —Å–∞–º–∏ –∏–º–µ–Ω–∞ –¥–µ—Ä–∂–∏–º –≤ user_data.
    """
    rows = [[InlineKeyboardButton(text=n, callback_data=f"vacdel_idx:{i}")]
            for i, n in enumerate(names)]
    if not rows:
        rows = [[InlineKeyboardButton(text="‚Äî", callback_data="vacdel_none")]]
    return InlineKeyboardMarkup(rows)

async def cmd_vacancy_del(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not await _guard(update):
        return
    vacs = await asyncio.to_thread(list_vacancies_sync)
    names = [v.name for v in vacs]
    ctx.user_data["__vacs_del_names"] = names
    if not names:
        await update.message.reply_text("–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ ‚Äî –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=_build_del_keyboard(names)
    )

async def vacancy_del_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()

    if not is_admin(update):
        await q.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    data = q.data
    if data == "vacdel_none":
        return

    if not data.startswith("vacdel_idx:"):
        return

    try:
        idx = int(data.split(":", 1)[1])
    except ValueError:
        await q.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    names = ctx.user_data.get("__vacs_del_names", [])
    if idx < 0 or idx >= len(names):
        await q.message.reply_text("–≠—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è —É–∂–µ –∏—Å—á–µ–∑–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞. –û–±–Ω–æ–≤–∏—Ç–µ /vacancy_del.")
        return

    name = names[idx]
    ok = await asyncio.to_thread(delete_vacancy_sync, name)

    # –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
    vacs = await asyncio.to_thread(list_vacancies_sync)
    names = [v.name for v in vacs]
    ctx.user_data["__vacs_del_names"] = names

    if ok:
        text = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: ¬´{name}¬ª"
    else:
        text = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ¬´{name}¬ª"

    if names:
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await q.message.edit_text(text + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                  reply_markup=_build_del_keyboard(names))
    else:
        await q.message.edit_text(text + "\n\n–ë–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.")
